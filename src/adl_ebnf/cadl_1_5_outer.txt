/* Work in progress for ADL 1.5 (Athanasios Anastasiou) */

/* Definitions of various terminal symbols */

SYM_AFTER::= 'after'|'AFTER'
SYM_ALLOW_ARCHETYPE::= 'allow_archetype'|'ALLOW_ARCHETYPE'
SYM_BEFORE::= 'before'|'BEFORE' 
SYM_CARDINALITY::= 'cardinality'|'CARDINALITY'
SYM_ELLIPSIS::='..'
SYM_END_CBLOCK::='}'
SYM_EXISTENCE::='existence'|'EXISTENCE'
SYM_FALSE::='false'|'FALSE'
SYM_GE::='>='
SYM_GT::='>'
SYM_INCLUDE::='include'|'INCLUDE'
SYM_INTERVAL_DELIM::='|'
SYM_LE::='<='
SYM_LIST_CONTINUE::='...'
SYM_LT::='<'
SYM_MATCHES::='matches'|'MATCHES'
SYM_NE:='!='
SYM_NOT:='not'|'NOT'
SYM_ORDERED::='ordered'|'ORDERED'
SYM_START_CBLOCK::='{'
SYM_TRUE::='true'|'TRUE'
SYM_UNIQUE::='unique'|'UNIQUE'
SYM_UNORDERED::='unordered'|'UNORDERED'
SYM_USE_ARCHETYPE::='use_archetype'|'USE_ARCHETYPE'
SYM_USE_NODE::='use_node'|'USE_NODE'
SYM_CLOSED::='closed'|'CLOSED'

SYM_AND::='and'|'AND'
SYM_XOR::='xor'|'XOR'
SYM_COLON::=SYM_COLON
SYM_COMA::=SYM_COMA
SYM_EQ::=SYM_EQ
SYM_EXCLUDE::='exclude'|'EXCLUDE'
SYM_EXISTS::='exists'|'EXISTS'
SYM_IMPLIES::='implies'|'IMPLIES'
SYM_OCCURRENCES::='occurrences'|'OCCURRENCES'
SYM_OR::='or'|'OR'
SYM_STAR::=SYM_STAR


/* Definitions of values */
/* TODO: HIGH, These need to be revised to conform with EBNF */

IDCHAR [a-zA-Z0-9_]
VALUESTR::=[a-zA-Z0-9._\-]+
NAMESTR::=([a-zA-Z][a-zA-Z0-9_]+)
ALPHANUM_STR::=[a-zA-Z0-9_]+

ARCHETYPE_ID::=({NAMESTR}(\.{ALPHANUM_STR})*::)?{NAMESTR}-{ALPHANUM_STR}-{NAMESTR}\.{NAMESTR}(-{ALPHANUM_STR})*\.v[0-9]+((\.[0-9]+){0,2}((-rc|\+u|\+)[0-9]+)?)?
PATH_SEG::=[a-z]{ALPHANUM_CHAR}*(\[({ID_CODE}|{ARCHETYPE_ID})\])?


V_ABS_PATH::=(\/{PATH_SEG})+
V_ATTRIBUTE_IDENTIFIER::=[a-z]{IDCHAR}*
/* TODO: HIGH, A bit difficult to understand the definition of this */
V_EXPANDED_VALUE_SET_DEF::=
V_EXTERNAL_VALUE_SET_DEF
V_EXT_REF::='['ARCHETYPE_ID']'
V_GENERIC_TYPE_IDENTIFIER::=[A-Z]IDCHAR*'<'[a-zA-Z0-9,_<>]+'>'
V_ID_CODE::='[' ID_CODE ']'
V_INTEGER::=[0-9]+ | [0-9]{1,3}(,[0-9]{3})+

V_ISO8601_DATE_CONSTRAINT_PATTERN::=[yY][yY][yY][yY]-[mM?X][mM?X]-[dD?X][dD?X]
/*TODO: HIGH, According to the current CADL notes the first part of this def should be removed when archetypes with a missing 'T' have gone */
V_ISO8601_DATE_TIME_CONSTRAINT_PATTERN::=([yY][yY][yY][yY]-[mM?][mM?]-[dD?X][dD?X][ ][hH?X][hH?X]:[mM?X][mM?X]:[sS?X][sS?X])|([yY][yY][yY][yY]-[mM?][mM?]-[dD?X][dD?X]T[hH?X][hH?X]:[mM?X][mM?X]:[sS?X][sS?X])

/*TODO: HIGH, P is a literal */
V_ISO8601_DURATION::=(P([0-9]+[yY])?([0-9]+[mM])?([0-9]+[wW])?([0-9]+[dD])?T([0-9]+[hH])?([0-9]+[mM])?([0-9]+([\.,][0-9]+)?[sS])?) | (P([0-9]+[yY])?([0-9]+[mM])?([0-9]+[wW])?([0-9]+[dD])? 

/*TODO: HIGH, Check the documentation about the note on the following definition */
V_ISO8601_DURATION_CONSTRAINT_PATTERN::=(P[yY]?[mM]?[Ww]?[dD]?(T[hH]?[mM]?[sS]?)?\/\})|(P[yY]?[mM]?[Ww]?[dD]?(T[hH]?[mM]?[sS]?)?)
V_ISO8601_EXTENDED_DATE::=([0-9]{4}-[0-1][0-9]-[0-3][0-9]) | ([0-9]{4}-[0-1][0-9])
V_ISO8601_EXTENDED_DATE_TIME::=([0-9]{4}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9]([\.,][0-9]+)?(Z|[+-][0-9]{4})?) |
                               ([0-9]{4}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9](Z|[+-][0-9]{4})?) |
                               ([0-9]{4}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9](Z|[+-][0-9]{4})?)
V_ISO8601_EXTENDED_TIME::=([0-2][0-9]:[0-6][0-9]:[0-6][0-9]([\.,][0-9]+)?(Z|[+-][0-9]{4})?) |
                          ([0-2][0-9]:[0-6][0-9](Z|[+-][0-9]{4})?)
/* TODO: HIGH, First pattern to be removed when all archetypes with a leading T have gone according to cadl15 doc */
V_ISO8601_TIME_CONSTRAINT_PATTERN::=(T[hH][hH]:[mM?X][mM?X]:[sS?X][sS?X]) | ([hH][hH]:[mM?X][mM?X]:[sS?X][sS?X])
V_REAL::=([0-9]+\.[0-9]+) | ([0-9]+\.[0-9]+[eE][+-]?[0-9]+)
V_REGEXP::=PATH_SEG ('/' {PATH_SEG})+
V_REL_PATH::= PATH_SEG ('/' PATH_SEG)+ 
V_ROOT_ID_CODE::='['ID_CODE_LEADER '1' ('.' 1)* ']'
V_SLOT_FILLER::='['ID_CODE[ \t]*,[ \t]*ARCHETYPE_ID']'
V_STRING::='"'[^\\\n'"']*'"'
V_TYPE_IDENTIFIER::=([A-Z]|IDCHAR)*
V_URI::=[a-z]+:\/\/[^<>|\\{}^~"\[\] ]*
V_VALUE_DEF::='[' AT_CODE ']'
V_VALUE_SET_REF_ASSUMED::='[' AC_CODE [ \t]*';'[ \t]* AT_CODE ']'
V_VALUE_SET_REF::='['AC_CODE']'
               

/* TODO: HIGH, Ask about this */
V_CADL_TEXT::=c_complex_object|assertions

c_complex_object::=c_complex_object_head SYM_MATCHES SYM_START_CBLOCK c_complex_object_body SYM_END_CBLOCK | c_complex_object_head

c_complex_object_head::= c_complex_object_id c_occurrences
  
c_complex_object_id::= (type_identifier V_ROOT_ID_CODE) | 
                       (type_identifier V_ID_CODE) |
                       (sibling_order type_identifier V_ID_CODE) | 
                       type_identifier

sibling_order::= SYM_AFTER V_ID_CODE |
                 SYM_BEFORE V_ID_CODE

c_complex_object_body::= c_any | c_attribute_defs

c_object: c_complex_object | c_archetype_root | c_complex_object_proxy |
          archetype_slot | c_primitive_object

c_archetype_root::= SYM_USE_ARCHETYPE type_identifier V_SLOT_FILLER c_occurrences |
                    SYM_USE_ARCHETYPE type_identifier V_EXT_REF c_occurrences
                    
c_complex_object_proxy::= SYM_USE_NODE type_identifier V_ID_CODE c_occurrences V_ABS_PATH |
                          SYM_USE_NODE type_identifier c_occurrences V_ABS_PATH
                        
archetype_slot::= c_archetype_slot_head SYM_MATCHES SYM_START_CBLOCK c_includes c_excludes SYM_END_CBLOCK |
                  c_archetype_slot_head

c_archetype_slot_head::=c_archetype_slot_id c_occurrences
  
c_archetype_slot_id::= SYM_ALLOW_ARCHETYPE type_identifier V_ID_CODE |
                       sibling_order SYM_ALLOW_ARCHETYPE type_identifier V_ID_CODE |
                       SYM_ALLOW_ARCHETYPE type_identifier V_ID_CODE SYM_CLOSED |
                       SYM_ALLOW_ARCHETYPE type_identifier

c_primitive_object::= c_integer | c_real | c_date | c_time | c_date_time |
                      c_duration | c_string | c_terminology_code | c_boolean

/* TODO: HIGH, Revise the right way to declare the ANY here */
c_any::= ANY

c_attribute_defs::= c_attribute_def | c_attribute_defs c_attribute_def

c_attribute_def::= c_attribute | c_attribute_tuple

/* TODO: HIGH, What does the error mean here? */
c_attribute::= c_attr_head SYM_MATCHES SYM_START_CBLOCK c_attr_values SYM_END_CBLOCK |
               c_attr_head | c_attr_head SYM_MATCHES SYM_START_CBLOCK error SYM_END_CBLOCK

c_attr_head::= V_ATTRIBUTE_IDENTIFIER c_existence c_cardinality |
               V_ABS_PATH c_existence c_cardinality
             
c_attr_values::= c_object | c_attr_values c_object | c_any

c_attribute_tuple::= '[' c_tuple_attr_ids ']' SYM_MATCHES SYM_START_CBLOCK c_object_tuples SYM_END_CBLOCK

c_tuple_attr_ids::=(V_ATTRIBUTE_IDENTIFIER (SYM_COMA V_ATTRIBUTE_IDENTIFIER)*)

c_object_tuples::= (c_object_tuple (SYM_COMA c_object_tuple)*)

c_object_tuple::= '[' c_object_tuple_items ']'

c_object_tuple_items::= (SYM_START_CBLOCK c_primitive_object SYM_END_CBLOCK) |
                        (c_object_tuple_items SYM_COMA SYM_START_CBLOCK c_primitive_object SYM_END_CBLOCK)

c_includes::= ANY | SYM_INCLUDE assertions

c_excludes::= ANY | SYM_EXCLUDE assertions

assertions::= assertion+

assertion::= any_identifier ':' boolean_node |
             boolean_node |
             arch_outer_constraint_expr

boolean_node::= boolean_leaf | boolean_expr

boolean_expr::= boolean_unop_expr | boolean_binop_expr

boolean_leaf::= boolean_literal | boolean_constraint | ( boolean_node ) |
                arithmetic_relop_expr
                
arch_outer_constraint_expr::= V_REL_PATH SYM_MATCHES SYM_START_CBLOCK c_primitive_object SYM_END_CBLOCK

boolean_constraint::= V_ABS_PATH SYM_MATCHES SYM_START_CBLOCK c_primitive_object SYM_END_CBLOCK |
                      V_ABS_PATH SYM_MATCHES SYM_START_CBLOCK c_terminology_code SYM_END_CBLOCK
                      
boolean_unop_expr::= SYM_EXISTS V_ABS_PATH | SYM_NOT V_ABS_PATH | 
                     SYM_NOT ( boolean_node )

boolean_binop_expr::= boolean_node boolean_binop_symbol boolean_leaf

boolean_binop_symbol::= SYM_OR | SYM_AND | SYM_XOR | SYM_IMPLIES

boolean_literal::= SYM_TRUE | SYM_FALSE

arithmetic_relop_expr::= arithmetic_node relational_binop_symbol arithmetic_node

arithmetic_node::= arithmetic_leaf | arithmetic_arith_binop_expr

arithmetic_leaf::= arithmetic_value | '(' arithmetic_node ')'

arithmetic_arith_binop_expr::= arithmetic_node arithmetic_binop_symbol arithmetic_leaf

arithmetic_value::= integer_value | real_value | V_ABS_PATH

relational_binop_symbol::= SYM_EQ | SYM_NE | SYM_LE | SYM_LT | SYM_GE | SYM_GT

arithmetic_binop_symbol::= '/' | SYM_STAR | '+' | '-' | '^' 

c_existence::= ANY | (SYM_EXISTENCE SYM_MATCHES SYM_START_CBLOCK existence SYM_END_CBLOCK)

existence::= V_INTEGER | V_INTEGER SYM_ELLIPSIS V_INTEGER

c_cardinality::= ANY | SYM_CARDINALITY SYM_MATCHES SYM_START_CBLOCK cardinality SYM_END_CBLOCK

cardinality::= multiplicity | 
               (multiplicity SYM_COLON SYM_ORDERED) |
               (multiplicity SYM_COLON SYM_UNORDERED) |
               (multiplicity SYM_COLON SYM_UNIQUE) |
               (multiplicity SYM_COLON SYM_ORDERED SYM_COLON SYM_UNIQUE) |
               (multiplicity SYM_COLON SYM_UNORDERED SYM_COLON SYM_UNIQUE) |
               (multiplicity SYM_COLON SYM_UNIQUE SYM_COLON SYM_ORDERED) |
               (multiplicity SYM_COLON SYM_UNIQUE SYM_COLON SYM_UNORDERED)
               
c_occurrences::= ANY | (SYM_OCCURRENCES SYM_MATCHES SYM_START_CBLOCK multiplicity SYM_END_CBLOCK)

multiplicity::= integer_value | 
                SYM_STAR | 
                (V_INTEGER SYM_ELLIPSIS integer_value) | 
                (V_INTEGER SYM_ELLIPSIS SYM_STAR)
                
c_integer::= integer_value | integer_list | integer_interval | 
             integer_interval_list | (c_integer SYM_COLON integer_value)

c_real::= real_value | real_list | real_interval | real_interval_list | (c_real SYM_COLON real_value)

c_date::= V_ISO8601_DATE_CONSTRAINT_PATTERN | date_value | date_list | 
          date_interval | date_interval_list | (c_date SYM_COLON date_value)

c_time::= V_ISO8601_TIME_CONSTRAINT_PATTERN |
          time_value |
          time_list |
          time_interval |
          time_interval_list |
          (c_time SYM_COLON time_value)

c_date_time::= V_ISO8601_DATE_TIME_CONSTRAINT_PATTERN |
               date_time_value |
               date_time_list |
               date_time_interval |
               date_time_interval_list |
               (c_date_time SYM_COLON date_time_value) |
               
/* TODO: HIGH, Do we need a symbol declaration for the forwrard slash here? */
c_duration::= (V_ISO8601_DURATION_CONSTRAINT_PATTERN '/' duration_interval) |
              (V_ISO8601_DURATION_CONSTRAINT_PATTERN '/' duration_value) |
              V_ISO8601_DURATION_CONSTRAINT_PATTERN |
              duration_value
              duration_list
              duration_interval
              duration_interval_list
              (c_duration SYM_COLON duration_value)
               
               c_duration ; error |
              V_ISO8601_DURATION_CONSTRAINT_PATTERN_ERR /* TODO: HIGH, Is this refering to the error condition only? */

c_string::= V_STRING | string_list | V_REGEXP | (c_string SYM_COLON string_value)

c_terminology_code::= V_VALUE_SET_REF | V_VALUE_SET_REF_ASSUMED |
                      V_VALUE_DEF | V_EXPANDED_VALUE_SET_DEF | 
                      V_EXTERNAL_VALUE_SET_DEF 
                      
| ERR_VALUE_SET_MISSING_CODES /*TODO: HIGH, Are these simply marking the error conditions or are they parsable? */
| ERR_VALUE_SET_DEF_DUP_CODE
| ERR_VALUE_SET_DEF_ASSUMED
| ERR_VALUE_SET_DEF

c_boolean::= SYM_TRUE | SYM_FALSE | boolean_list | (c_boolean SYM_COLON boolean_value)

any_identifier::= type_identifier | V_ATTRIBUTE_IDENTIFIER

type_identifier::= V_TYPE_IDENTIFIER | V_GENERIC_TYPE_IDENTIFIER

string_value::= V_STRING 

string_list::= (V_STRING SYM_COMA V_STRING) | 
               (string_list SYM_COMA V_STRING) |
               (string_list SYM_COMA SYM_LIST_CONTINUE) |
               (V_STRING SYM_COMA SYM_LIST_CONTINUE)
               
/* TODO: MID, We can definitely simplify these rules as [+-]? V_INTEGER */
integer_value::= V_INTEGER | ('+' V_INTEGER) | '-' V_INTEGER

integer_list::= (integer_value SYM_COMA integer_value) |
                (integer_list SYM_COMA integer_value) |
                (integer_value SYM_COMA SYM_LIST_CONTINUE)
                
integer_interval::=(SYM_INTERVAL_DELIM integer_value SYM_ELLIPSIS integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM SYM_GT integer_value SYM_ELLIPSIS integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM integer_value SYM_ELLIPSIS SYM_LT integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM SYM_GT integer_value SYM_ELLIPSIS SYM_LT integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM SYM_LT integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM SYM_LE integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM SYM_GT integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM SYM_GE integer_value SYM_INTERVAL_DELIM) |
                   (SYM_INTERVAL_DELIM integer_value SYM_INTERVAL_DELIM)
                  
integer_interval_list::= (integer_interval SYM_COMA integer_interval) |
                         (integer_interval_list SYM_COMA integer_interval)  |
                         (integer_interval SYM_COMA SYM_LIST_CONTINUE)

/* TODO: MID, This can be simplified */
real_value: V_REAL | '+' V_REAL | '-' V_REAL

real_list::= (real_value SYM_COMA real_value) |
             (real_list SYM_COMA real_value) |
             (real_value SYM_COMA SYM_LIST_CONTINUE)

real_interval::= (SYM_INTERVAL_DELIM real_value SYM_ELLIPSIS real_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT real_value SYM_ELLIPSIS real_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM real_value SYM_ELLIPSIS SYM_LT real_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT real_value SYM_ELLIPSIS SYM_LT real_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_LT real_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_LE real_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT real_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GE real_value SYM_INTERVAL_DELIM)
                 (SYM_INTERVAL_DELIM real_value SYM_INTERVAL_DELIM)
                 
real_interval_list::= (real_interval SYM_COMA real_interval) |
                      (real_interval_list SYM_COMA real_interval) |
                      (real_interval SYM_COMA SYM_LIST_CONTINUE)

boolean_value::= SYM_TRUE | SYM_FALSE

boolean_list::= (boolean_value SYM_COMA boolean_value) |
                (boolean_list SYM_COMA boolean_value) |
                (boolean_value SYM_COMA SYM_LIST_CONTINUE)
                
date_value::= V_ISO8601_EXTENDED_DATE

date_list::= (date_value SYM_COMA date_value) |
             (date_list SYM_COMA date_value) |
             (date_value SYM_COMA SYM_LIST_CONTINUE)
             
date_interval::= (SYM_INTERVAL_DELIM date_value SYM_ELLIPSIS date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT date_value SYM_ELLIPSIS date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM date_value SYM_ELLIPSIS SYM_LT date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT date_value SYM_ELLIPSIS SYM_LT date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_LT date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_LE date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GE date_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM date_value SYM_INTERVAL_DELIM)
                 
date_interval_list::= (date_interval SYM_COMA date_interval) |
                      (date_interval_list SYM_COMA date_interval) |
                      (date_interval SYM_COMA SYM_LIST_CONTINUE)
                      
time_value::= V_ISO8601_EXTENDED_TIME

time_list::= (time_value SYM_COMA time_value) | 
             (time_list SYM_COMA time_value) |
             (time_value SYM_COMA SYM_LIST_CONTINUE)
             
/* TODO: MID, We can definitely simplify these repetitions here */
time_interval::= (SYM_INTERVAL_DELIM time_value SYM_ELLIPSIS time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT time_value SYM_ELLIPSIS time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM time_value SYM_ELLIPSIS SYM_LT time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT time_value SYM_ELLIPSIS SYM_LT time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_LT time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_LE time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GT time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM SYM_GE time_value SYM_INTERVAL_DELIM) |
                 (SYM_INTERVAL_DELIM time_value SYM_INTERVAL_DELIM)
                 
time_interval_list::= (time_interval SYM_COMA time_interval) |
                      (time_interval_list SYM_COMA time_interval) |
                      (time_interval SYM_COMA SYM_LIST_CONTINUE)
                      
date_time_value::= V_ISO8601_EXTENDED_DATE_TIME

date_time_list::= (date_time_value SYM_COMA date_time_value) |
                  (date_time_list SYM_COMA date_time_value) |
                  (date_time_value SYM_COMA SYM_LIST_CONTINUE)
                  
/* TODO: Definitely possible to do some simplifications here */
date_time_interval::= (SYM_INTERVAL_DELIM date_time_value SYM_ELLIPSIS date_time_value SYM_INTERVAL_DELIM) |
                      (SYM_INTERVAL_DELIM SYM_GT date_time_value SYM_ELLIPSIS date_time_value SYM_INTERVAL_DELIM) |
                      (SYM_INTERVAL_DELIM date_time_value SYM_ELLIPSIS SYM_LT date_time_value SYM_INTERVAL_DELIM) |
                      (SYM_INTERVAL_DELIM SYM_GT date_time_value SYM_ELLIPSIS SYM_LT date_time_value SYM_INTERVAL_DELIM)
                      (SYM_INTERVAL_DELIM SYM_LT date_time_value SYM_INTERVAL_DELIM) |
                      (SYM_INTERVAL_DELIM SYM_LE date_time_value SYM_INTERVAL_DELIM) |
                      (SYM_INTERVAL_DELIM SYM_GT date_time_value SYM_INTERVAL_DELIM) |
                      (SYM_INTERVAL_DELIM SYM_GE date_time_value SYM_INTERVAL_DELIM) |
                      (SYM_INTERVAL_DELIM date_time_value SYM_INTERVAL_DELIM)
                      
date_time_interval_list::= (date_time_interval SYM_COMA date_time_interval) |
                           (date_time_interval_list SYM_COMA date_time_interval) |
                           (date_time_interval SYM_COMA SYM_LIST_CONTINUE) 
                           
duration_value::= V_ISO8601_DURATION

duration_list::= (duration_value SYM_COMA duration_value) |
                 (duration_list SYM_COMA duration_value) |
                 (duration_value SYM_COMA SYM_LIST_CONTINUE)
                 
duration_interval::= (SYM_INTERVAL_DELIM duration_value SYM_ELLIPSIS duration_value SYM_INTERVAL_DELIM) |
                     (SYM_INTERVAL_DELIM SYM_GT duration_value SYM_ELLIPSIS duration_value SYM_INTERVAL_DELIM) |
                     (SYM_INTERVAL_DELIM duration_value SYM_ELLIPSIS SYM_LT duration_value SYM_INTERVAL_DELIM) |
                     (SYM_INTERVAL_DELIM SYM_GT duration_value SYM_ELLIPSIS SYM_LT duration_value SYM_INTERVAL_DELIM) |
                     (SYM_INTERVAL_DELIM SYM_LT duration_value SYM_INTERVAL_DELIM) |
                     (SYM_INTERVAL_DELIM SYM_LE duration_value SYM_INTERVAL_DELIM) |
                     (SYM_INTERVAL_DELIM SYM_GT duration_value SYM_INTERVAL_DELIM) | 
                     (SYM_INTERVAL_DELIM SYM_GE duration_value SYM_INTERVAL_DELIM) |
                     (SYM_INTERVAL_DELIM duration_value SYM_INTERVAL_DELIM)

duration_interval_list::= (duration_interval SYM_COMA duration_interval) |
                          (duration_interval_list SYM_COMA duration_interval) |
                          (duration_interval SYM_COMA SYM_LIST_CONTINUE)

uri_value::=V_URI
