// Author: Bostjan Lah
// (c) Copyright, Marand, http://www.marand.com
// Licensed under LGPL: http://www.gnu.org/copyleft/lesser.html
// Based on AQL grammar by Ocean Informatics: http://www.openehr.org/wiki/download/attachments/2949295/EQL_v0.6.grm?version=1&modificationDate=1259650833000

// Rule Definitions

<Query> ::= <Select> <From>
           | <Select> <From> <Where>
            | <Select> <From> <OrderBy>   ! is this allowed?
            | <Select> <From> <Where> <OrderBy>

<Select> ::= 'SELECT' <SelectExpr>
         | 'SELECT' <TOP> <SelectExpr>

<Top> ::= 'TOP' Integer
          | 'TOP' Integer 'BACKWARD'
          | 'TOP' Integer 'FORWARD'

<Where> ::= 'WHERE' <IdentifiedExpr>

<OrderBy> ::= 'ORDER BY' <OrderBySeq>

<OrderBySeq>  ::= <OrderByExpr> 
		| <OrderByExpr> ',' <OrderBySeq>

<OrderByExpr> ::= <IdentifiedPath>
		| <IdentifiedPath> 'DESCENDING'
		| <IdentifiedPath> 'ASCENDING'
		| <IdentifiedPath> 'DESC'
		| <IdentifiedPath> 'ASC'

<SelectExpr> ::= <IdentifiedPathSeq>

//! When multiple paths provided, each IdentifiedPath must represent an object of type DataValue
<IdentifiedPathSeq> ::= <IdentifiedPath//>
			| <IdentifiedPath> 'as' Identifier
			| <IdentifiedPath> ',' <IdentifiedPathSeq>
			| <IdentifiedPath> 'as' Identifier ',' <IdentifiedPathSeq>

<From> ::=   'FROM' <FromExpr>		! stop or/and without root class
	    | 'FROM' <FromEHR> <ContainsExpr>
           | 'FROM' <FromEHR>
!          'FROM' <ContainsOr>

<FromEHR> ::= 'EHR' <StandardPredicate>
              | 'EHR' Identifier <StandardPredicate>
              | 'EHR' Identifier

<IdentifiedExpr> ::= <IdentifiedEquality>
                   | <IdentifiedExprBoolean>
                   |'(' <IdentifiedExprBoolean> ')'

<IdentifiedExprBoolean> ::= <IdentifiedExpr> 'OR' <IdentifiedExpr>
                              | <IdentifiedExpr> 'AND' <IdentifiedExpr>
                              | <IdentifiedExpr> 'XOR' <IdentifiedExpr>
                              | 'NOT''(' <IdentifiedExprBoolean> ')'
                              | 'NOT' <IdentifiedEquality>

<IdentifiedEquality> ::= <IdentifiedOperand> ComparableOperator <IdentifiedOperand>
		     | <IdentifiedOperand> 'matches' '{' <MatchesOperand> '}'
                     | <IdentifiedOperand> 'matches' RegExPattern
                     | 'EXISTS' <IdentifiedPath>
		     | identifiedOperand 'matches' '{' matchesOperand '}'
	             | identifiedOperand 'matches' REGEXPATTERN
	             | 'EXISTS' identifiedPath;

<IdentifiedOperand> ::= <Operand> | <IdentifiedPath>

!<IdentifiedOperand> ::= <Operand> | <RelativePath>

<IdentifiedPath>::= Identifier
                    | Identifier <Predicate>
                    | Identifier '/' <ObjectPath>
                    | Identifier <Predicate> '/' <ObjectPath>
!		| Identifer <AbsolutePath>
!		| Identifer <Predicate> <AbsolutePath>

<Predicate> ::= <NodePredicate>

<NodePredicate> ::= '['<NodePredicateOr>']'

<NodePredicateOr> ::= <NodePredicateAnd>
                 | <NodePredicateOr> 'or' <NodePredicateAnd>

<NodePredicateAnd> ::= <NodePredicateComparable>
		| <NodePredicateAnd> 'and' <NodePredicateComparable>

<NodePredicateComparable> ::= <PredicateOperand> ComparableOperator <PredicateOperand>
                          | NodeId
                          | NodeId ',' String        ! <NodeId> and name/value = <String> shortcut
                          | NodeId ',' parameter     ! <NodeId> and name/value = <Parameter> shortcut
                          | <NodePredicateRegEx>     ! /items[{/at0001.*/}], /items[at0001 and name/value matches {//}]
                          | ArchetypeId
                          | ArchetypeId ',' String        ! <NodeId> and name/value = <String> shortcut
                          | ArchetypeId ',' parameter     ! <NodeId> and name/value = <Parameter> shortcut

<NodePredicateRegEx>    ::= RegExPattern
                          | <PredicateOperand> 'matches' RegExPattern

<MatchesOperand> ::= <ValueListItems>
			| UriValue

!<ValueList> ::= '{'<ValueListItems>'}'

<ValueListItems> ::= <Operand>
                     |<Operand> ',' <ValueListItems>

<URI>     ::= '{' UriValue '}'

<ArchetypePredicate> ::= '[' ArchetypeId ']'
			 | '[' Parameter ']'
                      | '[' RegExPattern ']'

<VersionPredicate> ::= '[' <VersionPredicateOptions> ']'

<VersionPredicateOptions> ::= 'latest_version' | 'all_versions'

<StandardPredicate> ::= '[' <PredicateExpr> ']'

<PredicateExpr> ::= <PredicateOr>

<PredicateOr> ::= <PredicateAnd>
                 | <PredicateOr> 'or' <PredicateAnd>

<PredicateAnd> ::= <PredicateEquality>
                 | <PredicateAnd> 'and' <PredicateEquality>

<PredicateEquality> ::= <PredicateOperand> ComparableOperator <PredicateOperand>

<PredicateOperand> ::= !Identifier
		!| Identifier PathItem
                 | <ObjectPath>
                 | <Operand>

<Operand> ::= String | Integer | Float | Date | Parameter | Boolean

<ObjectPath> ::=  <PathPart>
                | <PathPart> '/' <ObjectPath>

<PathPart> ::= Identifier
           | Identifier <Predicate>

<FromExpr> ::=  <SimpleClassExpr>
		| <SimpleClassExpr> <ContainsExpr>

//! Check thislass
<ContainsExpr>::= 'CONTAINS' <ContainsExpression>
                  !'CONTAINS' <ContainsOr>

<ContainsExpression> ::= <ClassExpr>
                        | <ContainExpressionBoolean>
                        |'(' <ContainExpressionBoolean> ')'
 	| '(' containExpressionBool ')' -> ^(OPEN containExpressionBool)

<ContainExpressionBoolean> ::= <ContainsExpression> 'OR' <ContainsExpression>
                              | <ContainsExpression> 'AND' <ContainsExpression>
                              | <ContainsExpression> 'XOR' <ContainsExpression>

<ClassExpr>::=   <SimpleClassExpr>
		   | '(' <SimpleClassExpr> <ContainsExpr> ')'
		   | <SimpleClassExpr> <ContainsExpr>

<SimpleClassExpr>::= Identifier							
               | Identifier Identifier					
               | <ArchetypedClassExpr>
		 | <VersionedClassExpr>
		 | <VersionClassExpr>
		 ! | <IdentifiedObjectExpr>                           
		 ! | <IdentifiedObjectExpr>                           

<ArchetypedClassExpr>::= Identifier <ArchetypePredicate>	
               | Identifier Identifier <ArchetypePredicate>	

//! need to be used once VersionedClassExpr is removed
!<IdentifiedObjectExpr>::= Identifier <StandardPredicate>	
!               | Identifier Identifier <StandardPredicate>

<VersionedClassExpr>::= 'VERSIONED_OBJECT'
               | 'VERSIONED_OBJECT' Identifier
               | 'VERSIONED_OBJECT' <StandardPredicate>
               | 'VERSIONED_OBJECT' Identifier <StandardPredicate>

<VersionClassExpr>::= 'VERSION'
               | 'VERSION' Identifier
               | 'VERSION' <StandardPredicate>
               | 'VERSION' Identifier <StandardPredicate>
		 | 'VERSION' <VersionPredicate>
               | 'VERSION' Identifier <VersionPredicate>

// LEXER PATTERNS
//
// Terminal Definitions
Boolean     = 'true' | 'false'
!NodeId      = 'a''t'{Digit}{Digit}{Digit}{Digit}
//! conflict with Identifier
!NodeId	     = 'at'({Digit}{Digit}{Digit}{Digit}('.0'*('.'{NonZeroDigit}{Digit}*)+|('.'{NonZeroDigit}{Digit}*)*)|'0''.0'*('.'{NonZeroDigit}{Digit}*)+|('.'{NonZeroDigit}{Digit}*)+)
NodeId	     = 'at'({Digit}+('.'{Digit}+)*)

//NODEID	:	'at' DIGIT+ ('.' DIGIT+)*;
!Identifier  = {Letter}({Alphanumeric}|'_')*  
!Identifier  = {Letter}{IdChar}*  
//! restricted to allow only letters after the 4th character due to conflict with extended NodeId
!Identifier  = {Letter}{IdChar}?{IdChar}?{IdChar}?({Letter}|'_')* 
Identifier = {LetterMinusA}{IdCharMinusT}?{IdChar}* | 'a''t'?(({letter}|'_')*|{LetterMinusT}{Alphanumeric}*)

// ???
!PathItem = '/'{Letter}({Alphanumeric}|'_')*
Integer     = {Digit}+
Float       = {Digit}+'.'{Digit}+
Date        = ''{Digit}{Digit}{Digit}{Digit}'-'{Digit}{Digit}'-'{Digit}{Digit}''
!Parameter   = '$'{letter}({Alphanumeric}|'_')*
Parameter   = '$'{letter}{IdChar}*

//! could constrain UID further
UniqueId    = {digit}+('.'{digit}+)+'.'{digit}+  ! OID
          | {Hex Char}+('-'{Hex Char}+)+       ! UUID

//! could constrain ArchetypeId further
!ArchetypeId = {Letter}+'-'{Letter}+'-'({Letter}|'_')+'.'({Letter}|'_'|'-')+'.v'{Digit}+('.'{Digit}+)?  ! not allow a number in archetype id concept, such as openEHR-EHR-OBSERVATION.laboratory-hba1c.v1
ArchetypeId = {Letter}+'-'{Letter}+'-'({Letter}|'_')+'.'({IdChar}|'-')+'.v'{Digit}+('.'{Digit}+)?

ComparableOperator = '=' | '!=' | '>' | '>=' | '<' | '<='
UriValue   = {Letter}+'://'({UriString}|'['|']'|', '''|'')*
            |{Letter}+':'({UriString}|'['|']'|'')*
            |LETTER+ ':' (URISTRING|'['|']'|'\'')*

RegExPattern = '{/'{RegExChar}+'/}'

String      = '"'{String Char}*'"'
